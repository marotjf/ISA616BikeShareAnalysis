knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
#Creating Dummy variables for multilevel Factors
dum<-as.data.frame(model.matrix(~0+bikeshare$quarter))
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
#Manage Packages
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(readxl,fpp2,ggplot2,scales,dplyr, forecast, rsample, rpart, rpart.plot, ipred, caret )
#Reading in data
setwd("M:/ISA 616/ISA616BikeShareAnalysis/BikeShare Workflow")
bikeshare <- read.csv("Bike Share Data.csv", stringsAsFactors = TRUE)
bikeshare$Date <- sapply(strsplit(as.character(bikeshare$datetime), " "), "[", 1)
bikeshare$Time <- sapply(strsplit(as.character(bikeshare$datetime), " "), "[", 2)
bikeshare$Date <- as.Date(bikeshare$datetime,format='%m/%d/%Y')
bikeshare$Time <- as.factor(bikeshare$Time)
bikeshare$Time <- as.numeric(bikeshare$Time)
#recoding other variables as factors
bikeshare$quarter <- factor(bikeshare$season)
bikeshare$holiday <- factor(bikeshare$holiday)
bikeshare$workingday <- factor(bikeshare$workingday)
bikeshare$weather <- factor(bikeshare$weather)
#Removing original datetime column
library(dplyr)
bikeshare<-select(bikeshare, -datetime)
bikeshare<-select(bikeshare, -season)
#DATA DESCRIPTION Code
#Calling data summary function that is within the github.
source('data summary.R')
data.summary(bikeshare)
head(bikeshare)
tail(bikeshare)
#First fitting model with all variables available in training set
full<-lm(count~ holiday+ workingday+ temp +atemp + humidity+ windspeed,data=bikeshare.train)
null<-lm(bikeshare.train$count~1, data=bikeshare.train)
lm.step<-step(null, scope=list(lower=null, upper=full), direction="both", trace=0)#trace=0 suppresses output.  Change trace=1 or 2 to get more
summary(lm.step)
## Manage Packages
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(readxl,fpp2,ggplot2,scales,dplyr, skimr, DataExplorer,corrplot, rpart, rpart.plot())
#Reading in the data
setwd("M:/ISA 616/ISA616BikeShareAnalysis/BikeShare Workflow")
bikeshare <- read.csv("Bike Share Data.csv", stringsAsFactors = TRUE)
###############################################################################################
#Data Description Code
#Splitting date and time column into a separate date column and numeric time column
bikeshare$Date <- sapply(strsplit(as.character(bikeshare$datetime), " "), "[", 1)
bikeshare$Time <- sapply(strsplit(as.character(bikeshare$datetime), " "), "[", 2)
bikeshare$Date <- as.Date(bikeshare$datetime,format='%m/%d/%Y')
bikeshare$Time <- as.factor(bikeshare$Time)
bikeshare$Time <- as.numeric(bikeshare$Time)
#recoding other variables as factors
bikeshare$quarter <- factor(bikeshare$season)
bikeshare$holiday <- factor(bikeshare$holiday)
bikeshare$workingday <- factor(bikeshare$workingday)
bikeshare$weather <- factor(bikeshare$weather)
#Removing original datetime column
library(dplyr)
bikeshare<-select(bikeshare, -datetime)
bikeshare<-select(bikeshare, -season)
str(bikeshare)
source('data summary.R')
data.summary(bikeshare)
#################################################################################
#PREPROCESSING STEPS
#Creating Dummies for Factors
dum<-as.data.frame(model.matrix(~0+bikeshare$quarter))
colnames(dum)<-c("1Q", "2Q", "3Q", "4Q")
bikeshare<-cbind(bikeshare, dum[,-1])
dum1<-as.data.frame(model.matrix(~0+bikeshare$weather))
colnames(dum1)<-c("Clear", "Mist", "Light_SnowRain", "Heavy_SnowRain")
bikeshare<-cbind(bikeshare, dum1[,-1])
bikeshare<-select(bikeshare, -quarter)
bikeshare<-select(bikeshare, -weather)
str(bikeshare)
#Outlier Detection
boxplot(bikeshare$count)
Outliers = boxplot(bikeshare$count)$out
Outliers
which(bikeshare$count %in% Outliers)
#Plots to look at data
plot(as.Date(bikeshare$Date), bikeshare$count)
library(corrplot)
nums<-unlist(lapply(bikeshare, is.numeric))
M<-cor(bikeshare[,nums], use="complete.obs")
corrplot(M, method="circle")
#BEGINNNING OF Analysis - Splitting into Training and Validation -Predicting Full Count
#split into testing and validation
set.seed(13)
trainIndex = sample(1:nrow(bikeshare), size = round(0.7*nrow(bikeshare)), replace=FALSE)
head(trainIndex, 10)
bikeshare.train<-bikeshare[trainIndex, ]
bikeshare.valid<-bikeshare[-trainIndex, ]
nrow(bikeshare.train)
sstr(bikeshare.train)
#For this analysis we are looking at overall count. Therefore we need to take casual and registered out of the data frame for the analysis because count is the sum of these variables
bikeshare.train<-select(bikeshare.train, -registered)
bikeshare.train<-select(bikeshare.train, -casual)
bikeshare.valid<-select(bikeshare.valid, -registered)
bikeshare.valid<-select(bikeshare.valid, -casual)
#first fitting model with all variables entered. Needed to write it out long ways because cannot include registered and casual when predicting count
full<-lm(count~ holiday+ workingday+ temp +atemp + humidity+ windspeed+Clear+Mist+Light_SnowRain+Heavy_SnowRain,data=bikeshare.train)
summary(full)
#Next using stepwise function to create multiple regression for total Count
null<-lm(bikeshare.train$count~1, data=bikeshare.train)
lm.step<-step(null, scope=list(lower=null, upper=full), direction="both", trace=0)#trace=0 suppresses output.  Change trace=1 or 2 to get more
summary(lm.step)
#Evaluate Model
library(forecast)
p.full<-predict(full, newdata=bikeshare.valid)
p.step<-predict(lm.step, newdata=bikeshare.valid)
head(p.full)
accuracy(p.step, bikeshare.valid$count)
#Analysis for Registered Riders
set.seed(13)
trainIndex = sample(1:nrow(bikeshare), size = round(0.7*nrow(bikeshare)), replace=FALSE)
head(trainIndex, 10)
bikeshare.train<-bikeshare[trainIndex, ]
bikeshare.valid<-bikeshare[-trainIndex, ]
nrow(bikeshare.train)
bikeshare.train<-select(bikeshare.train, -count)
bikeshare.valid<-select(bikeshare.valid, -count)
full<-lm(registered~holiday+ workingday+ temp +atemp + humidity+ windspeed,data=bikeshare.train)
summary(full)
null<-lm(bikeshare.train$registered~1, data=bikeshare.train)
lm.step<-step(null, scope=list(lower=null, upper=full), direction="both", trace=0)#trace=0 suppresses output.  Change trace=1 or 2 to get more
summary(lm.step)
set.seed(13)
trainIndex = sample(1:nrow(bikeshare), size = round(0.7*nrow(bikeshare)), replace=FALSE)
head(trainIndex, 10)
bikeshare.train<-bikeshare[trainIndex, ]
bikeshare.valid<-bikeshare[-trainIndex, ]
nrow(bikeshare.train)
bikeshare.train<-select(bikeshare.train, -count)
bikeshare.valid<-select(bikeshare.valid, -count)
full<-lm(casual~holiday+ workingday+ temp +atemp + humidity+ windspeed~,data=bikeshare.train)
set.seed(13)
trainIndex = sample(1:nrow(bikeshare), size = round(0.7*nrow(bikeshare)), replace=FALSE)
head(trainIndex, 10)
bikeshare.train<-bikeshare[trainIndex, ]
bikeshare.valid<-bikeshare[-trainIndex, ]
nrow(bikeshare.train)
bikeshare.train<-select(bikeshare.train, -count)
bikeshare.valid<-select(bikeshare.valid, -count)
full<-lm(casual~holiday+ workingday+ temp +atemp + humidity+ windspeed,data=bikeshare.train)
null<-lm(bikeshare.train$casual~1, data=bikeshare.train)
lm.step<-step(null, scope=list(lower=null, upper=full), direction="both", trace=0)
summary(lm.step)
#Evaluate Model
library(forecast)
p.full<-predict(full, newdata=bikeshare.valid)
p.step<-predict(lm.step, newdata=bikeshare.valid)
head(p.full)
accuracy(p.step, bikeshare.valid$casual)
#split into testing and validation
set.seed(13)
trainIndex = sample(1:nrow(bikeshare), size = round(0.7*nrow(bikeshare)), replace=FALSE)
head(trainIndex, 10)
bikeshare.train<-bikeshare[trainIndex, ]
bikeshare.valid<-bikeshare[-trainIndex, ]
nrow(bikeshare.train)
bikeshare.train<-select(bikeshare.train, -count)
bikeshare.valid<-select(bikeshare.valid, -count)
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
m1 <- rpart(
formula = casual ~ holiday + workingday + temp + humidity + windspeed + summer + fall + winter,
data    = bikeshare.train,
method  = "anova"
)
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
m1 <- rpart(
formula = casual ~ holiday + workingday + temp + humidity + windspeed + spring + fall + winter,
data    = bikeshare.train,
method  = "anova"
)
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
m1 <- rpart(
formula = casual ~ holiday + workingday + temp + humidity + windspeed + summer + fall + winter,
data    = bikeshare.train,
method  = "anova"
)
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
m1 <- rpart(
formula = casual ~ holiday + workingday + temp + humidity + windspeed + Summer + fall + winter,
data    = bikeshare.train,
method  = "anova"
)
m1 <- rpart(
formula = casual ~ holiday + workingday + temp + humidity + windspeed,
data    = bikeshare.train,
method  = "anova"
)
rpart.plot(m1)
#Validating the regression tree using the cv bagged model
ctrl <- trainControl(method = "cv",  number = 10)
# CV bagged model
bagged_cv <- train(
casual ~ holiday + workingday + temp + humidity + windspeed,
data = bikeshare.train,
method = "treebag",
trControl = ctrl,
importance = TRUE
)
# assess results
bagged_cv
# plot most important variables
plot(varImp(bagged_cv), 20)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE,
toc = TRUE)
install.packages("pacman")
#Manage Packages
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(readxl,fpp2,ggplot2,scales,dplyr, forecast, rsample, rpart, rpart.plot, ipred, caret )
#Reading in data
setwd("M:/ISA 616/ISA616BikeShareAnalysis/BikeShare Workflow")
bikeshare <- read.csv("Bike Share Data.csv", stringsAsFactors = TRUE)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(readxl,fpp2,ggplot2,scales,dplyr, forecast, rsample, rpart, rpart.plot, ipred, caret )
#Reading in data
setwd("M:/ISA 616/ISA616BikeShareAnalysis/BikeShare Workflow")
bikeshare <- read.csv("Bike Share Data.csv", stringsAsFactors = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(readxl,fpp2,ggplot2,scales,dplyr, forecast, rsample, rpart, rpart.plot, ipred, caret, DT )
#Reading in data
setwd("M:/ISA 616/ISA616BikeShareAnalysis/BikeShare Workflow")
bikeshare <- read.csv("Bike Share Data.csv", stringsAsFactors = TRUE)
#DATA DESCRIPTION Code
#Calling data summary function that is within the github.
source('data summary.R')
data.summary(bikeshare)
head(bikeshare)
tail(bikeshare)
#DATA DESCRIPTION Code
#Calling data summary function that is within the github.
source('data summary.R')
data.summary(bikeshare)
summary = as.data.frame(data.summary(bikeshare))
head(bikeshare)
tail(bikeshare)
#DATA DESCRIPTION Code
#Calling data summary function that is within the github.
source('data summary.R')
data.summary(bikeshare)
summary = as.data.frame(data.summary(bikeshare))
DT::datatable(summary)
head(bikeshare)
tail(bikeshare)
#DATA DESCRIPTION Code
#Calling data summary function that is within the github.
source('data summary.R')
data.summary(bikeshare)
summary = as.data.frame(data.summary(bikeshare))
DT::datatable(summary)
head = as.data.frame(head(bikeshare))
tail = as.data.frame(tail(bikeshare))
DT::datatable(head)
DT::datatable(tail)
#DATA DESCRIPTION Code
#Calling data summary function that is included within the github.
source('data summary.R')
summary = as.data.frame(data.summary(bikeshare))
DT::datatable(summary)
head = as.data.frame(head(bikeshare))
tail = as.data.frame(tail(bikeshare))
DT::datatable(head)
DT::datatable(tail)
#DATA DESCRIPTION Code
#Calling data summary function that is included within the github.
source('data summary.R')
#Subsetting data to only include numerical variables. The DT function can only show one group
nums<-unlist(lapply(bikeshare, is.numeric))
bikeshare.num<-bikeshare[,nums]
summary = as.data.frame(data.summary(bikeshare.num))
DT::datatable(summary)
head = as.data.frame(head(bikeshare))
tail = as.data.frame(tail(bikeshare))
DT::datatable(head)
DT::datatable(tail)
#DATA DESCRIPTION Code
#Calling data summary function that is included within the github.
source('data summary.R')
data.summary(bikeshare)
#DATA DESCRIPTION Code
DT::datatable(head(bikeshare))
DT::datatable(tail(bikeshare))
#DATA DESCRIPTION Code
DT::datatable(head(bikeshare, 10))
DT::datatable(tail(bikeshare, 10))
DT::datatable(tail(bikeshare, 10))
#DATA DESCRIPTION Code
#Calling data summary function that is included within the github.
source('data summary.R')
data.summary(bikeshare)
